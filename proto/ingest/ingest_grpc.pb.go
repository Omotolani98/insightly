// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/ingest.proto

package ingest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LogIngest_StreamLogs_FullMethodName = "/ingest.LogIngest/StreamLogs"
)

// LogIngestClient is the client API for LogIngest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogIngestClient interface {
	// Client streams multiple logs in one connection
	StreamLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LogRecord, IngestAck], error)
}

type logIngestClient struct {
	cc grpc.ClientConnInterface
}

func NewLogIngestClient(cc grpc.ClientConnInterface) LogIngestClient {
	return &logIngestClient{cc}
}

func (c *logIngestClient) StreamLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LogRecord, IngestAck], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LogIngest_ServiceDesc.Streams[0], LogIngest_StreamLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LogRecord, IngestAck]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogIngest_StreamLogsClient = grpc.ClientStreamingClient[LogRecord, IngestAck]

// LogIngestServer is the server API for LogIngest service.
// All implementations must embed UnimplementedLogIngestServer
// for forward compatibility.
type LogIngestServer interface {
	// Client streams multiple logs in one connection
	StreamLogs(grpc.ClientStreamingServer[LogRecord, IngestAck]) error
	mustEmbedUnimplementedLogIngestServer()
}

// UnimplementedLogIngestServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogIngestServer struct{}

func (UnimplementedLogIngestServer) StreamLogs(grpc.ClientStreamingServer[LogRecord, IngestAck]) error {
	return status.Errorf(codes.Unimplemented, "method StreamLogs not implemented")
}
func (UnimplementedLogIngestServer) mustEmbedUnimplementedLogIngestServer() {}
func (UnimplementedLogIngestServer) testEmbeddedByValue()                   {}

// UnsafeLogIngestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogIngestServer will
// result in compilation errors.
type UnsafeLogIngestServer interface {
	mustEmbedUnimplementedLogIngestServer()
}

func RegisterLogIngestServer(s grpc.ServiceRegistrar, srv LogIngestServer) {
	// If the following call pancis, it indicates UnimplementedLogIngestServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LogIngest_ServiceDesc, srv)
}

func _LogIngest_StreamLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogIngestServer).StreamLogs(&grpc.GenericServerStream[LogRecord, IngestAck]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogIngest_StreamLogsServer = grpc.ClientStreamingServer[LogRecord, IngestAck]

// LogIngest_ServiceDesc is the grpc.ServiceDesc for LogIngest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogIngest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ingest.LogIngest",
	HandlerType: (*LogIngestServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLogs",
			Handler:       _LogIngest_StreamLogs_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/ingest.proto",
}
